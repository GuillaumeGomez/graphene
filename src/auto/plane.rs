// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_2", feature = "dox"))]
use Point3D;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use Vec3;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use Vec4;
use ffi;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::translate::*;
use gobject_ffi;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct Plane(Boxed<ffi::graphene_plane_t>);

    match fn {
        copy => |ptr| gobject_ffi::g_boxed_copy(ffi::graphene_plane_get_type(), ptr as *mut _) as *mut ffi::graphene_plane_t,
        free => |ptr| gobject_ffi::g_boxed_free(ffi::graphene_plane_get_type(), ptr as *mut _),
        get_type => || ffi::graphene_plane_get_type(),
    }
}

impl Plane {
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn alloc() -> Plane {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::graphene_plane_alloc())
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn distance(&self, point: &Point3D) -> f32 {
        unsafe {
            ffi::graphene_plane_distance(self.to_glib_none().0, point.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn equal(&self, b: &Plane) -> bool {
        unsafe {
            from_glib(ffi::graphene_plane_equal(self.to_glib_none().0, b.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_constant(&self) -> f32 {
        unsafe {
            ffi::graphene_plane_get_constant(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_normal(&self) -> Vec3 {
        unsafe {
            let mut normal = Vec3::uninitialized();
            ffi::graphene_plane_get_normal(self.to_glib_none().0, normal.to_glib_none_mut().0);
            normal
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn init(&mut self, normal: Option<&Vec3>, constant: f32) -> Option<Plane> {
        unsafe {
            from_glib_none(ffi::graphene_plane_init(self.to_glib_none_mut().0, normal.to_glib_none().0, constant))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn init_from_plane(&mut self, src: &Plane) -> Option<Plane> {
        unsafe {
            from_glib_none(ffi::graphene_plane_init_from_plane(self.to_glib_none_mut().0, src.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn init_from_point(&mut self, normal: &Vec3, point: &Point3D) -> Option<Plane> {
        unsafe {
            from_glib_none(ffi::graphene_plane_init_from_point(self.to_glib_none_mut().0, normal.to_glib_none().0, point.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn init_from_points(&mut self, a: &Point3D, b: &Point3D, c: &Point3D) -> Option<Plane> {
        unsafe {
            from_glib_none(ffi::graphene_plane_init_from_points(self.to_glib_none_mut().0, a.to_glib_none().0, b.to_glib_none().0, c.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn init_from_vec4(&mut self, src: &Vec4) -> Option<Plane> {
        unsafe {
            from_glib_none(ffi::graphene_plane_init_from_vec4(self.to_glib_none_mut().0, src.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn negate(&self) -> Plane {
        unsafe {
            let mut res = Plane::uninitialized();
            ffi::graphene_plane_negate(self.to_glib_none().0, res.to_glib_none_mut().0);
            res
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn normalize(&self) -> Plane {
        unsafe {
            let mut res = Plane::uninitialized();
            ffi::graphene_plane_normalize(self.to_glib_none().0, res.to_glib_none_mut().0);
            res
        }
    }
}

impl PartialEq for Plane {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for Plane {}
